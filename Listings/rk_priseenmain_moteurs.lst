


ARM Macro Assembler    Page 1 


    1 00000000         ;; RK - Evalbot (Cortex M3 de Texas Instrument)
    2 00000000         ; programme - Pilotage 2 Moteurs Evalbot par PWM tout en
                        ASM (Evalbot tourne sur lui m?me)
    3 00000000         
    4 00000000         
    5 00000000         
    6 00000000                 AREA             |.text|, CODE, READONLY
    7 00000000                 ENTRY
    8 00000000                 EXPORT           __main
    9 00000000         
   10 00000000         ;; The IMPORT command specifies that a symbol is defined
                        in a shared object at runtime.
   11 00000000                 IMPORT           MOTEUR_INIT ; initialise les mo
                                                            teurs (configure le
                                                            s pwms + GPIO)
   12 00000000         
   13 00000000                 IMPORT           MOTEUR_DROIT_ON ; activer le mo
                                                            teur droit
   14 00000000                 IMPORT           MOTEUR_DROIT_OFF ; d?activer le
                                                             moteur droit
   15 00000000                 IMPORT           MOTEUR_DROIT_AVANT ; moteur dro
                                                            it tourne vers l'av
                                                            ant
   16 00000000                 IMPORT           MOTEUR_DROIT_ARRIERE ; moteur d
                                                            roit tourne vers l'
                                                            arri?re
   17 00000000                 IMPORT           MOTEUR_DROIT_INVERSE ; inverse 
                                                            le sens de rotation
                                                             du moteur droit
   18 00000000         
   19 00000000                 IMPORT           MOTEUR_GAUCHE_ON ; activer le m
                                                            oteur gauche
   20 00000000                 IMPORT           MOTEUR_GAUCHE_OFF ; d?activer l
                                                            e moteur gauche
   21 00000000                 IMPORT           MOTEUR_GAUCHE_AVANT ; moteur ga
                                                            uche tourne vers l'
                                                            avant
   22 00000000                 IMPORT           MOTEUR_GAUCHE_ARRIERE ; moteur 
                                                            gauche tourne vers 
                                                            l'arri?re
   23 00000000                 IMPORT           MOTEUR_GAUCHE_INVERSE ; inverse
                                                             le sens de rotatio
                                                            n du moteur gauche
   24 00000000         
   25 00000000         ; This register controls the clock gating logic in norma
                       l Run mode
   26 00000000 400FE108 
                       SYSCTL_PERIPH_GPIO
                               EQU              0x400FE108  ; SYSCTL_RCGC2_R (p
                                                            291 datasheet de lm
                                                            3s9b92.pdf)
   27 00000000         
   28 00000000         ; The GPIODATA register is the data register
   29 00000000 40025000 
                       GPIO_PORTF_BASE
                               EQU              0x40025000  ; GPIO Port F (APB)
                                                             base: 0x4002.5000 
                                                            (p416 datasheet de 
                                                            lm3s9B92.pdf)



ARM Macro Assembler    Page 2 


   30 00000000         
   31 00000000         ; The GPIODATA register is the data register
   32 00000000 40007000 
                       GPIO_PORTD_BASE
                               EQU              0x40007000  ; GPIO Port D (APB)
                                                             base: 0x4000.7000 
                                                            (p416 datasheet de 
                                                            lm3s9B92.pdf)
   33 00000000         
   34 00000000         ; The GPIODATA register is the data register
   35 00000000 40024000 
                       GPIO_PORTE_BASE
                               EQU              0x40024000  ; GPIO Port E (APB)
                                                             base: 0x4002.4000 
                                                            (p416 datasheet de 
                                                            lm3s9B92.pdf)
   36 00000000         
   37 00000000         
   38 00000000         
   39 00000000         ; configure the corresponding pin to be an output
   40 00000000         ; all GPIO pins are inputs by default
   41 00000000 00000400 
                       GPIO_O_DIR
                               EQU              0x00000400  ; GPIO Direction (p
                                                            417 datasheet de lm
                                                            3s9B92.pdf)
   42 00000000         
   43 00000000         ; The GPIODR2R register is the 2-mA drive control regist
                       er
   44 00000000         ; By default, all GPIO pins have 2-mA drive.
   45 00000000 00000500 
                       GPIO_O_DR2R
                               EQU              0x00000500  ; GPIO 2-mA Drive S
                                                            elect (p428 datashe
                                                            et de lm3s9B92.pdf)
                                                            
   46 00000000         
   47 00000000         ; Digital enable register
   48 00000000         ; To use the pin as a digital input or output, the corre
                       sponding GPIODEN bit must be set.
   49 00000000 0000051C 
                       GPIO_O_DEN
                               EQU              0x0000051C  ; GPIO Digital Enab
                                                            le (p437 datasheet 
                                                            de lm3s9B92.pdf)
   50 00000000         
   51 00000000         ; Pull_up
   52 00000000 00000510 
                       GPIO_I_PUR
                               EQU              0x00000510  ; GPIO Pull-Up (p43
                                                            2 datasheet de lm3s
                                                            9B92.pdf)
   53 00000000         
   54 00000000         ; Broches select
   55 00000000 00000030 
                       BROCHE4_5
                               EQU              0x30        ; led1 & led2 sur b
                                                            roche 4 et 5 
   56 00000000         



ARM Macro Assembler    Page 3 


   57 00000000 00000020 
                       BROCHE4 EQU              0x20        ; led1 & led2 sur b
                                                            roche 4 et 5 
   58 00000000         
   59 00000000 00000010 
                       BROCHE5 EQU              0x10        ; led1 & led2 sur b
                                                            roche 4 et 5 
   60 00000000         
   61 00000000 00000040 
                       BROCHE6 EQU              0x40        ; bouton poussoir 1
                                                            
   62 00000000         
   63 00000000 000000C0 
                       BROCHE6_7
                               EQU              0xC0        ; bouton poussoir 1
                                                            
   64 00000000         
   65 00000000 00000003 
                       BROCHE0_1
                               EQU              0x03
   66 00000000         
   67 00000000         
   68 00000000 00042000 
                       DUREE   EQU              0x00042000
   69 00000000         
   70 00000000         
   71 00000000         
   72 00000000         
   73 00000000         
   74 00000000         
   75 00000000         
   76 00000000         __main
   77 00000000         
   78 00000000         ; ;; Enable the Port F & D peripheral clock   (p291 data
                       sheet de lm3s9B96.pdf)
   79 00000000         ; ;;         
   80 00000000 F8DF 9124       ldr              r9, = SYSCTL_PERIPH_GPIO 
                                                            ;; RCGC2
   81 00000004 F04F 0438       mov              r4, #0x00000038 ;; Enable clock
                                                             sur GPIO D et F o?
                                                             sont branch?s les 
                                                            leds (0x28 == 0b101
                                                            000)
   82 00000008         ; ;;                              (GPIO::FEDCBA)
   83 00000008 F8C9 4000       str              r4, [r9]
   84 0000000C         ;; Enable clock sur GPIO E o? est branch? le bouton pous
                       soir (0x10 == 0b10000)
   85 0000000C         ;; (GPIO::FEDCBA)
   86 0000000C         
   87 0000000C         ; ;; "There must be a delay of 3 system clocks before an
                       y GPIO reg. access  (p413 datasheet de lm3s9B92.pdf)
   88 0000000C BF00            nop                          ;; tres tres import
                                                            ant....
   89 0000000E BF00            nop
   90 00000010 BF00            nop                          ;; pas necessaire e
                                                            n simu ou en debbug
                                                             step by step...
   91 00000012         
   92 00000012         ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^CONFIGURATION LED



ARM Macro Assembler    Page 4 


   93 00000012         
   94 00000012 F8DF 9118       ldr              r9, = GPIO_PORTF_BASE+GPIO_O_DI
R 
                                                            ;; 1 Pin du portF e
                                                            n sortie (broche 4 
                                                            : 00010000)
   95 00000016 F04F 0430       ldr              r4, = BROCHE4_5 ; 0x30 = 0b 001
                                                            1 0000 
   96 0000001A F8C9 4000       str              r4, [r9]
   97 0000001E         
   98 0000001E F8DF 9110       ldr              r9, = GPIO_PORTF_BASE+GPIO_O_DE
N 
                                                            ;; Enable Digital F
                                                            unction 
   99 00000022 F04F 0430       ldr              r4, = BROCHE4_5
  100 00000026 F8C9 4000       str              r4, [r9]
  101 0000002A         
  102 0000002A F8DF 9108       ldr              r9, = GPIO_PORTF_BASE+GPIO_O_DR
2R 
                                                            ;; Choix de l'inten
                                                            sit? de sortie (2mA
                                                            )
  103 0000002E F04F 0430       ldr              r4, = BROCHE4_5
  104 00000032 F8C9 4000       str              r4, [r9]
  105 00000036         
  106 00000036         
  107 00000036         
  108 00000036 F04F 0200       mov              r2, #0x000  ;; pour eteindre LE
                                                            D
  109 0000003A         
  110 0000003A         ; allumer la led broche 4 (BROCHE4_5)
  111 0000003A F04F 0330       mov              r3, #BROCHE4_5 ;; Allume LED1&2
                                                             portF broche 4&5 :
                                                             00110000
  112 0000003E         
  113 0000003E         
  114 0000003E         ;mov r12, #BROCHE5
  115 0000003E         
  116 0000003E         
  117 0000003E F8DF 90F8       ldr              r9, = GPIO_PORTF_BASE + (BROCHE
4_5<<2) 
                                                            ;; @data Register =
                                                             @base + (mask<<2) 
                                                            ==> LED1
  118 00000042         
  119 00000042         ;vvvvvvvvvvvvvvvvvvvvvvvFin configuration LED 
  120 00000042         
  121 00000042         
  122 00000042         
  123 00000042         ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^CONFIGURATION Switcher 1
  124 00000042         
  125 00000042 4F3E            ldr              r7, = GPIO_PORTD_BASE+GPIO_O_DE
N 
                                                            ;; Enable Digital F
                                                            unction 
  126 00000044 F04F 04C0       ldr              r4, = BROCHE6_7
  127 00000048 603C            str              r4, [r7]
  128 0000004A         
  129 0000004A 4F3D            ldr              r7, = GPIO_PORTD_BASE+GPIO_I_PU



ARM Macro Assembler    Page 5 


R 
                                                            ;; Pull_up
  130 0000004C F04F 04C0       ldr              r4, = BROCHE6_7
  131 00000050 603C            str              r4, [r7]
  132 00000052         
  133 00000052 4F3C            ldr              r7, = GPIO_PORTD_BASE + (BROCHE
6_7<<2) 
                                                            ;; @data Register =
                                                             @base + (mask<<2) 
                                                            ==> Switcher
  134 00000054         
  135 00000054         ;vvvvvvvvvvvvvvvvvvvvvvvFin configuration Switcher 
  136 00000054         
  137 00000054         
  138 00000054         
  139 00000054         
  140 00000054         ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^CONFIGURATION Bumper 1
  141 00000054         
  142 00000054 F8DF 80F0       ldr              r8, = GPIO_PORTE_BASE+GPIO_O_DE
N 
                                                            ;; Enable Digital F
                                                            unction 
  143 00000058 F04F 0403       ldr              r4, = BROCHE0_1
  144 0000005C F8C8 4000       str              r4, [r8]
  145 00000060         
  146 00000060 F8DF 80E8       ldr              r8, = GPIO_PORTE_BASE+GPIO_I_PU
R 
                                                            ;; Pull_up
  147 00000064 F04F 0403       ldr              r4, = BROCHE0_1
  148 00000068 F8C8 4000       str              r4, [r8]
  149 0000006C         
  150 0000006C F8DF 80E0       ldr              r8, = GPIO_PORTE_BASE + (BROCHE
0_1<<2) 
                                                            ;; @data Register =
                                                             @base + (mask<<2) 
                                                            ==> Switcher
  151 00000070         
  152 00000070         ;vvvvvvvvvvvvvvvvvvvvvvvFin configuration Switcher 
  153 00000070         
  154 00000070         
  155 00000070         
  156 00000070         
  157 00000070         ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^CLIGNOTTEMENT
  158 00000070         
  159 00000070 F8C9 3000       str              r3, [r9]    ;; Allume LED1&2 po
                                                            rtF broche 4&5 : 00
                                                            110000 (contenu de 
                                                            r3)
  160 00000074         
  161 00000074         ;-------------------------------------------------------
                       --------------------------------------------------------
                       -----
  162 00000074         ;; BL Branchement vers un lien (sous programme)
  163 00000074         
  164 00000074         ; Configure les PWM + GPIO
  165 00000074 F7FF FFFE       BL               MOTEUR_INIT
  166 00000078         
  167 00000078         ; Activer les deux moteurs droit et gauche
  168 00000078 F7FF FFFE       BL               MOTEUR_DROIT_ON



ARM Macro Assembler    Page 6 


  169 0000007C F7FF FFFE       BL               MOTEUR_GAUCHE_ON
  170 00000080         
  171 00000080         
  172 00000080         ; Boucle de pilotage des 2 Moteurs (Evalbot tourne sur l
                       ui m?me)
  173 00000080         loop
  174 00000080 F000 F81A       BL               conditions
  175 00000084         ; Evalbot avance droit devant
  176 00000084         ;BL WAIT ; BL (Branchement vers le lien WAIT); possibili
                       t? de retour ? la suite avec (BX LR)
  177 00000084 E7FC            B                loop
  178 00000086         
  179 00000086         
  180 00000086         gauche
  181 00000086 F7FF FFFE       BL               MOTEUR_GAUCHE_ARRIERE
  182 0000008A F7FF FFFE       BL               MOTEUR_DROIT_AVANT
  183 0000008E F04F 0B20       mov              r11, #BROCHE4 ; POUR LES LED 
  184 00000092 F000 F821       BL               WAIT        ; ROTATION
  185 00000096 E7F3            B                loop
  186 00000098         
  187 00000098         droite
  188 00000098 F7FF FFFE       BL               MOTEUR_DROIT_ARRIERE
  189 0000009C F7FF FFFE       BL               MOTEUR_GAUCHE_AVANT
  190 000000A0 F04F 0B10       mov              r11, #BROCHE5
  191 000000A4 F000 F818       BL               WAIT
  192 000000A8 E7EA            B                loop
  193 000000AA         
  194 000000AA         avance
  195 000000AA F8C9 3000       str              r3, [r9]
  196 000000AE F7FF FFFE       BL               MOTEUR_GAUCHE_AVANT
  197 000000B2 F7FF FFFE       BL               MOTEUR_DROIT_AVANT
  198 000000B6 E7E3            B                loop
  199 000000B8         
  200 000000B8         
  201 000000B8         conditions
  202 000000B8         
  203 000000B8 F8D8 A000       ldr              r10,[r8]
  204 000000BC F1BA 0F01       CMP              r10,#0x01   ; collision gauche
  205 000000C0 D0E1            BEQ              gauche
  206 000000C2         
  207 000000C2 F8D8 A000       ldr              r10,[r8]
  208 000000C6 F1BA 0F02       CMP              r10,#0x02   ; collision droite
  209 000000CA D0E5            BEQ              droite
  210 000000CC         
  211 000000CC F8D8 A000       ldr              r10,[r8]
  212 000000D0 F1BA 0F03       CMP              r10,#0x03   ; pas de collision
  213 000000D4 D0E9            BEQ              avance
  214 000000D6         
  215 000000D6 4770            BX               LR
  216 000000D8         
  217 000000D8         ;; Boucle d'attante  
  218 000000D8 F04F 0C03 
                       WAIT    MOV              R12 ,#3
  219 000000DC         
  220 000000DC         
  221 000000DC         clignotte
  222 000000DC F8C9 2000       str              r2, [r9]    ;; Eteint LED car r
                                                            2 = 0x00      
  223 000000E0 F44F 2184       ldr              r1, = DUREE ;; pour la duree de



ARM Macro Assembler    Page 7 


                                                             la boucle d'attent
                                                            e1 (wait1)
  224 000000E4         
  225 000000E4 F8D8 A000 
                       led_off ldr              r10,[r8]
  226 000000E8 F1BA 0F00       CMP              r10,#0x00   ; les deux 
  227 000000EC D010            BEQ              gameover
  228 000000EE 3901            subs             r1, #1
  229 000000F0 D1F8            bne              led_off
  230 000000F2         
  231 000000F2 F8C9 B000       str              r11, [r9]   ;; Allume LED1&2 po
                                                            rtF broche 4&5 : 00
                                                            110000 (contenu de 
                                                            r3)
  232 000000F6 F44F 2184       ldr              r1, = DUREE ;; pour la duree de
                                                             la boucle d'attent
                                                            e2 (wait2)
  233 000000FA         
  234 000000FA F8D8 A000 
                       led_on  ldr              r10,[r8]
  235 000000FE F1BA 0F00       CMP              r10,#0x00   ; les deux 
  236 00000102 D005            BEQ              gameover
  237 00000104 3901            subs             r1, #1
  238 00000106 D1F8            bne              led_on
  239 00000108         
  240 00000108 F1BC 0C01       SUBS             R12, R12, #1
  241 0000010C D1E6            BNE              clignotte
  242 0000010E 4770            BX               LR          ; pour WAIT
  243 00000110         
  244 00000110 F7FF FFFE 
                       gameover
                               BL               MOTEUR_GAUCHE_OFF
  245 00000114 F7FF FFFE       BL               MOTEUR_DROIT_OFF
  246 00000118 F04F 0B30       mov              r11, #BROCHE4_5
  247 0000011C F7FF FFDC       BL               WAIT
  248 00000120 F8C9 2000       str              r2, [r9]
  249 00000124 BF00            NOP
  250 00000126                 END
              00 00 400FE108 
              40025400 
              4002551C 
              40025500 
              400250C0 
              4000751C 
              40007510 
              40007300 
              4002451C 
              40024510 
              4002400C 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --depend=.\ob
jects\rk_priseenmain_moteurs.d -o.\objects\rk_priseenmain_moteurs.o -I.\RTE\_Ta
rget_1 -IC:\Users\Mathieu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\In
clude -IC:\Users\Mathieu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\Device\ARM\ARM
CM3\Include --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 537
" --predefine="_RTE_ SETA 1" --predefine="ARMCM3 SETA 1" --predefine="_RTE_ SET
A 1" --list=.\listings\rk_priseenmain_moteurs.lst RK_PriseEnMain_Moteurs.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 6 in file RK_PriseEnMain_Moteurs.s
   Uses
      None
Comment: .text unused
WAIT 000000D8

Symbol: WAIT
   Definitions
      At line 218 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 184 in file RK_PriseEnMain_Moteurs.s
      At line 191 in file RK_PriseEnMain_Moteurs.s
      At line 247 in file RK_PriseEnMain_Moteurs.s

__main 00000000

Symbol: __main
   Definitions
      At line 76 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 8 in file RK_PriseEnMain_Moteurs.s
Comment: __main used once
avance 000000AA

Symbol: avance
   Definitions
      At line 194 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 213 in file RK_PriseEnMain_Moteurs.s
Comment: avance used once
clignotte 000000DC

Symbol: clignotte
   Definitions
      At line 221 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 241 in file RK_PriseEnMain_Moteurs.s
Comment: clignotte used once
conditions 000000B8

Symbol: conditions
   Definitions
      At line 201 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 174 in file RK_PriseEnMain_Moteurs.s
Comment: conditions used once
droite 00000098

Symbol: droite
   Definitions
      At line 187 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 209 in file RK_PriseEnMain_Moteurs.s
Comment: droite used once
gameover 00000110



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: gameover
   Definitions
      At line 244 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 227 in file RK_PriseEnMain_Moteurs.s
      At line 236 in file RK_PriseEnMain_Moteurs.s

gauche 00000086

Symbol: gauche
   Definitions
      At line 180 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 205 in file RK_PriseEnMain_Moteurs.s
Comment: gauche used once
led_off 000000E4

Symbol: led_off
   Definitions
      At line 225 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 229 in file RK_PriseEnMain_Moteurs.s
Comment: led_off used once
led_on 000000FA

Symbol: led_on
   Definitions
      At line 234 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 238 in file RK_PriseEnMain_Moteurs.s
Comment: led_on used once
loop 00000080

Symbol: loop
   Definitions
      At line 173 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 177 in file RK_PriseEnMain_Moteurs.s
      At line 185 in file RK_PriseEnMain_Moteurs.s
      At line 192 in file RK_PriseEnMain_Moteurs.s
      At line 198 in file RK_PriseEnMain_Moteurs.s

12 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

BROCHE0_1 00000003

Symbol: BROCHE0_1
   Definitions
      At line 65 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 143 in file RK_PriseEnMain_Moteurs.s
      At line 147 in file RK_PriseEnMain_Moteurs.s
      At line 150 in file RK_PriseEnMain_Moteurs.s

BROCHE4 00000020

Symbol: BROCHE4
   Definitions
      At line 57 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 183 in file RK_PriseEnMain_Moteurs.s
Comment: BROCHE4 used once
BROCHE4_5 00000030

Symbol: BROCHE4_5
   Definitions
      At line 55 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 95 in file RK_PriseEnMain_Moteurs.s
      At line 99 in file RK_PriseEnMain_Moteurs.s
      At line 103 in file RK_PriseEnMain_Moteurs.s
      At line 111 in file RK_PriseEnMain_Moteurs.s
      At line 117 in file RK_PriseEnMain_Moteurs.s
      At line 246 in file RK_PriseEnMain_Moteurs.s

BROCHE5 00000010

Symbol: BROCHE5
   Definitions
      At line 59 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 190 in file RK_PriseEnMain_Moteurs.s
Comment: BROCHE5 used once
BROCHE6 00000040

Symbol: BROCHE6
   Definitions
      At line 61 in file RK_PriseEnMain_Moteurs.s
   Uses
      None
Comment: BROCHE6 unused
BROCHE6_7 000000C0

Symbol: BROCHE6_7
   Definitions
      At line 63 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 126 in file RK_PriseEnMain_Moteurs.s
      At line 130 in file RK_PriseEnMain_Moteurs.s
      At line 133 in file RK_PriseEnMain_Moteurs.s

DUREE 00042000




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

Symbol: DUREE
   Definitions
      At line 68 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 223 in file RK_PriseEnMain_Moteurs.s
      At line 232 in file RK_PriseEnMain_Moteurs.s

GPIO_I_PUR 00000510

Symbol: GPIO_I_PUR
   Definitions
      At line 52 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 129 in file RK_PriseEnMain_Moteurs.s
      At line 146 in file RK_PriseEnMain_Moteurs.s

GPIO_O_DEN 0000051C

Symbol: GPIO_O_DEN
   Definitions
      At line 49 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 98 in file RK_PriseEnMain_Moteurs.s
      At line 125 in file RK_PriseEnMain_Moteurs.s
      At line 142 in file RK_PriseEnMain_Moteurs.s

GPIO_O_DIR 00000400

Symbol: GPIO_O_DIR
   Definitions
      At line 41 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 94 in file RK_PriseEnMain_Moteurs.s
Comment: GPIO_O_DIR used once
GPIO_O_DR2R 00000500

Symbol: GPIO_O_DR2R
   Definitions
      At line 45 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 102 in file RK_PriseEnMain_Moteurs.s
Comment: GPIO_O_DR2R used once
GPIO_PORTD_BASE 40007000

Symbol: GPIO_PORTD_BASE
   Definitions
      At line 32 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 125 in file RK_PriseEnMain_Moteurs.s
      At line 129 in file RK_PriseEnMain_Moteurs.s
      At line 133 in file RK_PriseEnMain_Moteurs.s

GPIO_PORTE_BASE 40024000

Symbol: GPIO_PORTE_BASE
   Definitions
      At line 35 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 142 in file RK_PriseEnMain_Moteurs.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

      At line 146 in file RK_PriseEnMain_Moteurs.s
      At line 150 in file RK_PriseEnMain_Moteurs.s

GPIO_PORTF_BASE 40025000

Symbol: GPIO_PORTF_BASE
   Definitions
      At line 29 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 94 in file RK_PriseEnMain_Moteurs.s
      At line 98 in file RK_PriseEnMain_Moteurs.s
      At line 102 in file RK_PriseEnMain_Moteurs.s
      At line 117 in file RK_PriseEnMain_Moteurs.s

SYSCTL_PERIPH_GPIO 400FE108

Symbol: SYSCTL_PERIPH_GPIO
   Definitions
      At line 26 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 80 in file RK_PriseEnMain_Moteurs.s
Comment: SYSCTL_PERIPH_GPIO used once
15 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

MOTEUR_DROIT_ARRIERE 00000000

Symbol: MOTEUR_DROIT_ARRIERE
   Definitions
      At line 16 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 188 in file RK_PriseEnMain_Moteurs.s
Comment: MOTEUR_DROIT_ARRIERE used once
MOTEUR_DROIT_AVANT 00000000

Symbol: MOTEUR_DROIT_AVANT
   Definitions
      At line 15 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 182 in file RK_PriseEnMain_Moteurs.s
      At line 197 in file RK_PriseEnMain_Moteurs.s

MOTEUR_DROIT_INVERSE 00000000

Symbol: MOTEUR_DROIT_INVERSE
   Definitions
      At line 17 in file RK_PriseEnMain_Moteurs.s
   Uses
      None
Comment: MOTEUR_DROIT_INVERSE unused
MOTEUR_DROIT_OFF 00000000

Symbol: MOTEUR_DROIT_OFF
   Definitions
      At line 14 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 245 in file RK_PriseEnMain_Moteurs.s
Comment: MOTEUR_DROIT_OFF used once
MOTEUR_DROIT_ON 00000000

Symbol: MOTEUR_DROIT_ON
   Definitions
      At line 13 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 168 in file RK_PriseEnMain_Moteurs.s
Comment: MOTEUR_DROIT_ON used once
MOTEUR_GAUCHE_ARRIERE 00000000

Symbol: MOTEUR_GAUCHE_ARRIERE
   Definitions
      At line 22 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 181 in file RK_PriseEnMain_Moteurs.s
Comment: MOTEUR_GAUCHE_ARRIERE used once
MOTEUR_GAUCHE_AVANT 00000000

Symbol: MOTEUR_GAUCHE_AVANT
   Definitions
      At line 21 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 189 in file RK_PriseEnMain_Moteurs.s
      At line 196 in file RK_PriseEnMain_Moteurs.s

MOTEUR_GAUCHE_INVERSE 00000000



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols


Symbol: MOTEUR_GAUCHE_INVERSE
   Definitions
      At line 23 in file RK_PriseEnMain_Moteurs.s
   Uses
      None
Comment: MOTEUR_GAUCHE_INVERSE unused
MOTEUR_GAUCHE_OFF 00000000

Symbol: MOTEUR_GAUCHE_OFF
   Definitions
      At line 20 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 244 in file RK_PriseEnMain_Moteurs.s
Comment: MOTEUR_GAUCHE_OFF used once
MOTEUR_GAUCHE_ON 00000000

Symbol: MOTEUR_GAUCHE_ON
   Definitions
      At line 19 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 169 in file RK_PriseEnMain_Moteurs.s
Comment: MOTEUR_GAUCHE_ON used once
MOTEUR_INIT 00000000

Symbol: MOTEUR_INIT
   Definitions
      At line 11 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 165 in file RK_PriseEnMain_Moteurs.s
Comment: MOTEUR_INIT used once
11 symbols
374 symbols in table

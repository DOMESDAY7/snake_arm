


ARM Macro Assembler    Page 1 


    1 00000000         ;; RK - Evalbot (Cortex M3 de Texas Instrument)
    2 00000000         ; programme - Pilotage 2 Moteurs Evalbot par PWM tout en
                        ASM (Evalbot tourne sur lui même)
    3 00000000         
    4 00000000         
    5 00000000         
    6 00000000                 AREA             |.text|, CODE, READONLY
    7 00000000                 ENTRY
    8 00000000                 EXPORT           __main
    9 00000000         
   10 00000000         ;; The IMPORT command specifies that a symbol is defined
                        in a shared object at runtime.
   11 00000000                 IMPORT           MOTEUR_INIT ; initialise les mo
                                                            teurs (configure le
                                                            s pwms + GPIO)
   12 00000000         
   13 00000000                 IMPORT           MOTEUR_DROIT_ON ; activer le mo
                                                            teur droit
   14 00000000                 IMPORT           MOTEUR_DROIT_OFF ; déactiver le
                                                             moteur droit
   15 00000000                 IMPORT           MOTEUR_DROIT_AVANT ; moteur dro
                                                            it tourne vers l'av
                                                            ant
   16 00000000                 IMPORT           MOTEUR_DROIT_ARRIERE ; moteur d
                                                            roit tourne vers l'
                                                            arrière
   17 00000000                 IMPORT           MOTEUR_DROIT_INVERSE ; inverse 
                                                            le sens de rotation
                                                             du moteur droit
   18 00000000         
   19 00000000                 IMPORT           MOTEUR_GAUCHE_ON ; activer le m
                                                            oteur gauche
   20 00000000                 IMPORT           MOTEUR_GAUCHE_OFF ; déactiver l
                                                            e moteur gauche
   21 00000000                 IMPORT           MOTEUR_GAUCHE_AVANT ; moteur ga
                                                            uche tourne vers l'
                                                            avant
   22 00000000                 IMPORT           MOTEUR_GAUCHE_ARRIERE ; moteur 
                                                            gauche tourne vers 
                                                            l'arrière
   23 00000000                 IMPORT           MOTEUR_GAUCHE_INVERSE ; inverse
                                                             le sens de rotatio
                                                            n du moteur gauche
   24 00000000         
   25 00000000         ; This register controls the clock gating logic in norma
                       l Run mode
   26 00000000 400FE108 
                       SYSCTL_PERIPH_GPIO
                               EQU              0x400FE108  ; SYSCTL_RCGC2_R (p
                                                            291 datasheet de lm
                                                            3s9b92.pdf)
   27 00000000         
   28 00000000         ; The GPIODATA register is the data register
   29 00000000 40025000 
                       GPIO_PORTF_BASE
                               EQU              0x40025000  ; GPIO Port F (APB)
                                                             base: 0x4002.5000 
                                                            (p416 datasheet de 
                                                            lm3s9B92.pdf)



ARM Macro Assembler    Page 2 


   30 00000000         
   31 00000000         ; The GPIODATA register is the data register
   32 00000000 40007000 
                       GPIO_PORTD_BASE
                               EQU              0x40007000  ; GPIO Port D (APB)
                                                             base: 0x4000.7000 
                                                            (p416 datasheet de 
                                                            lm3s9B92.pdf)
   33 00000000         
   34 00000000         ; The GPIODATA register is the data register
   35 00000000 40024000 
                       GPIO_PORTE_BASE
                               EQU              0x40024000  ; GPIO Port E (APB)
                                                             base: 0x4002.4000 
                                                            (p416 datasheet de 
                                                            lm3s9B92.pdf)
   36 00000000         
   37 00000000         
   38 00000000         
   39 00000000         ; configure the corresponding pin to be an output
   40 00000000         ; all GPIO pins are inputs by default
   41 00000000 00000400 
                       GPIO_O_DIR
                               EQU              0x00000400  ; GPIO Direction (p
                                                            417 datasheet de lm
                                                            3s9B92.pdf)
   42 00000000         
   43 00000000         ; The GPIODR2R register is the 2-mA drive control regist
                       er
   44 00000000         ; By default, all GPIO pins have 2-mA drive.
   45 00000000 00000500 
                       GPIO_O_DR2R
                               EQU              0x00000500  ; GPIO 2-mA Drive S
                                                            elect (p428 datashe
                                                            et de lm3s9B92.pdf)
                                                            
   46 00000000         
   47 00000000         ; Digital enable register
   48 00000000         ; To use the pin as a digital input or output, the corre
                       sponding GPIODEN bit must be set.
   49 00000000 0000051C 
                       GPIO_O_DEN
                               EQU              0x0000051C  ; GPIO Digital Enab
                                                            le (p437 datasheet 
                                                            de lm3s9B92.pdf)
   50 00000000         
   51 00000000         ; Pull_up
   52 00000000 00000510 
                       GPIO_I_PUR
                               EQU              0x00000510  ; GPIO Pull-Up (p43
                                                            2 datasheet de lm3s
                                                            9B92.pdf)
   53 00000000         
   54 00000000         ; Broches select
   55 00000000 00000030 
                       BROCHE4_5
                               EQU              0x30        ; led1 & led2 sur b
                                                            roche 4 et 5 
   56 00000000         



ARM Macro Assembler    Page 3 


   57 00000000 00000040 
                       BROCHE6 EQU              0x40        ; bouton poussoir 1
                                                            
   58 00000000         
   59 00000000 000000C0 
                       BROCHE6_7
                               EQU              0xC0        ; bouton poussoir 1
                                                            
   60 00000000         
   61 00000000 00000001 
                       BUMPERD EQU              0x01
   62 00000000 00000002 
                       BUMPERG EQU              0x02
   63 00000000 00000003 
                       BUMPER2 EQU              0x03
   64 00000000         
   65 00000000         ; blinking frequency
   66 00000000 002FFFFF 
                       DUREE   EQU              0x002FFFFF
   67 00000000         
   68 00000000         
   69 00000000         
   70 00000000         
   71 00000000         __main
   72 00000000         
   73 00000000         ; ;; Enable the Port F & D peripheral clock   (p291 data
                       sheet de lm3s9B96.pdf)
<<<<<<< Updated upstream
   72 00000000         ; ;;         
   73 00000000 F8DF 90B4       ldr              r9, = SYSCTL_PERIPH_GPIO 
=======
   74 00000000         ; ;;         
   75 00000000 F8DF 90E4       ldr              r9, = SYSCTL_PERIPH_GPIO 
>>>>>>> Stashed changes
                                                            ;; RCGC2
   76 00000004 F04F 0438       mov              r4, #0x00000038 ;; Enable clock
                                                             sur GPIO D et F où
                                                             sont branchés les 
                                                            leds (0x28 == 0b101
                                                            000)
   77 00000008         ; ;;                              (GPIO::FEDCBA)
   78 00000008 F8C9 4000       str              r4, [r9]
   79 0000000C         ;; Enable clock sur GPIO E où est branché le bouton pous
                       soir (0x10 == 0b10000)
   80 0000000C         ;; (GPIO::FEDCBA)
   81 0000000C         
   82 0000000C         ; ;; "There must be a delay of 3 system clocks before an
                       y GPIO reg. access  (p413 datasheet de lm3s9B92.pdf)
   83 0000000C BF00            nop                          ;; tres tres import
                                                            ant....
   84 0000000E BF00            nop
   85 00000010 BF00            nop                          ;; pas necessaire e
                                                            n simu ou en debbug
                                                             step by step...
   86 00000012         
<<<<<<< Updated upstream
   87 00000012 F8DF 90A8       ldr              r9, = GPIO_PORTF_BASE+GPIO_O_DI
=======
   87 00000012         ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^CONFIGURATION LED
   88 00000012         
   89 00000012 F8DF 90D8       ldr              r9, = GPIO_PORTF_BASE+GPIO_O_DI
>>>>>>> Stashed changes
R 
                                                            ;; 1 Pin du portF e
                                                            n sortie (broche 4 
                                                            : 00010000)
   90 00000016 F04F 0430       ldr              r4, = BROCHE4_5 ; 0x30 = 0b 001
                                                            1 0000 
<<<<<<< Updated upstream
   89 0000001A F8C9 4000       str              r4, [r9]
   90 0000001E         
   91 0000001E F8DF 90A0       ldr              r9, = GPIO_PORTF_BASE+GPIO_O_DE
=======
>>>>>>> Stashed changes



ARM Macro Assembler    Page 4 


   91 0000001A F8C9 4000       str              r4, [r9]
   92 0000001E         
   93 0000001E F8DF 90D0       ldr              r9, = GPIO_PORTF_BASE+GPIO_O_DE
N 
                                                            ;; Enable Digital F
                                                            unction 
<<<<<<< Updated upstream
   92 00000022 F04F 0430       ldr              r4, = BROCHE4_5
   93 00000026 F8C9 4000       str              r4, [r9]
   94 0000002A         
   95 0000002A F8DF 9098       ldr              r9, = GPIO_PORTF_BASE+GPIO_O_DR
=======
   94 00000022 F04F 0430       ldr              r4, = BROCHE4_5
   95 00000026 F8C9 4000       str              r4, [r9]
   96 0000002A         
   97 0000002A F8DF 90C8       ldr              r9, = GPIO_PORTF_BASE+GPIO_O_DR
>>>>>>> Stashed changes
2R 
                                                            ;; Choix de l'inten
                                                            sité de sortie (2mA
                                                            )
   98 0000002E F04F 0430       ldr              r4, = BROCHE4_5
   99 00000032 F8C9 4000       str              r4, [r9]
  100 00000036         
  101 00000036 F04F 0200       mov              r2, #0x000  ;; pour eteindre LE
                                                            D
  102 0000003A         
  103 0000003A         ; allumer la led broche 4 (BROCHE4_5)
  104 0000003A F04F 0330       mov              r3, #BROCHE4_5 ;; Allume LED1&2
                                                             portF broche 4&5 :
                                                             00110000
<<<<<<< Updated upstream
  103 0000003E         
  104 0000003E F8DF 9088       ldr              r9, = GPIO_PORTF_BASE + (BROCHE
=======
  105 0000003E         
  106 0000003E F8DF 90B8       ldr              r9, = GPIO_PORTF_BASE + (BROCHE
>>>>>>> Stashed changes
4_5<<2) 
                                                            ;; @data Register =
                                                             @base + (mask<<2) 
                                                            ==> LED1
  107 00000042         
  108 00000042         ;vvvvvvvvvvvvvvvvvvvvvvvFin configuration LED 
  109 00000042         
  110 00000042         
  111 00000042         
<<<<<<< Updated upstream
  112 00000042 4F22            ldr              r7, = GPIO_PORTD_BASE+GPIO_O_DE
N 
                                                            ;; Enable Digital F
                                                            unction 
  113 00000044 F04F 04C0       ldr              r4, = BROCHE6_7
  114 00000048 603C            str              r4, [r7]
  115 0000004A         
  116 0000004A 4F21            ldr              r7, = GPIO_PORTD_BASE+GPIO_I_PU
R 
                                                            ;; Pull_up
  117 0000004C F04F 04C0       ldr              r4, = BROCHE6_7
  118 00000050 603C            str              r4, [r7]
  119 00000052         
  120 00000052 4F20            ldr              r7, = GPIO_PORTD_BASE + (BROCHE
=======
  112 00000042         ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^CONFIGURATION Switcher 1
  113 00000042         
  114 00000042 4F2E            ldr              r7, = GPIO_PORTD_BASE+GPIO_O_DE
N 
                                                            ;; Enable Digital F
                                                            unction 
  115 00000044 F04F 04C0       ldr              r4, = BROCHE6_7
  116 00000048 603C            str              r4, [r7]
  117 0000004A         
  118 0000004A 4F2D            ldr              r7, = GPIO_PORTD_BASE+GPIO_I_PU
R 
                                                            ;; Pull_up
  119 0000004C F04F 04C0       ldr              r4, = BROCHE6_7
  120 00000050 603C            str              r4, [r7]
  121 00000052         
  122 00000052 4F2C            ldr              r7, = GPIO_PORTD_BASE + (BROCHE
>>>>>>> Stashed changes
6_7<<2) 
                                                            ;; @data Register =
                                                             @base + (mask<<2) 
                                                            ==> Switcher
  123 00000054         
  124 00000054         ;vvvvvvvvvvvvvvvvvvvvvvvFin configuration Switcher 
  125 00000054         
  126 00000054         



ARM Macro Assembler    Page 5 


  127 00000054         
  128 00000054         
<<<<<<< Updated upstream
  129 00000054 F8DF 8080       ldr              r8, = GPIO_PORTE_BASE+GPIO_O_DE
N 
                                                            ;; Enable Digital F
                                                            unction 
  130 00000058 F04F 0403       ldr              r4, = BROCHE0_1
  131 0000005C F8C8 4000       str              r4, [r8]
  132 00000060         
  133 00000060 F8DF 8078       ldr              r8, = GPIO_PORTE_BASE+GPIO_I_PU
R 
                                                            ;; Pull_up
  134 00000064 F04F 0403       ldr              r4, = BROCHE0_1
  135 00000068 F8C8 4000       str              r4, [r8]
  136 0000006C         
  137 0000006C F8DF 8070       ldr              r8, = GPIO_PORTE_BASE + (BROCHE
0_1<<2) 
=======
  129 00000054         ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^CONFIGURATION Bumper Droi
                       t
  130 00000054         
  131 00000054 F8DF C0B0       ldr              r12, = GPIO_PORTE_BASE+GPIO_O_D
EN 
                                                            ;; Enable Digital F
                                                            unction 
  132 00000058 F04F 0401       ldr              r4, = BUMPERD
  133 0000005C F8CC 4000       str              r4, [r12]
  134 00000060         
  135 00000060 F8DF C0A8       ldr              r12, = GPIO_PORTE_BASE+GPIO_I_P
UR 
                                                            ;; Pull_up
  136 00000064 F04F 0401       ldr              r4, = BUMPERD
  137 00000068 F8CC 4000       str              r4, [r12]
  138 0000006C         
  139 0000006C F8DF C0A0       ldr              r12, = GPIO_PORTE_BASE + (BUMPE
RD<<2) 
>>>>>>> Stashed changes
                                                            ;; @data Register =
                                                             @base + (mask<<2) 
                                                            ==> Switcher
  140 00000070         
  141 00000070         ;vvvvvvvvvvvvvvvvvvvvvvvFin configuration Bumper Droit 
  142 00000070         
  143 00000070         ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^CONFIGURATION Bumper Gauc
                       he 
  144 00000070         
  145 00000070 F8DF B094       ldr              r11, = GPIO_PORTE_BASE+GPIO_O_D
EN 
                                                            ;; Enable Digital F
                                                            unction 
  146 00000074 F04F 0402       ldr              r4, = BUMPERG
  147 00000078 F8CB 4000       str              r4, [r11]
  148 0000007C         
  149 0000007C F8DF B08C       ldr              r11, = GPIO_PORTE_BASE+GPIO_I_P
UR 
                                                            ;; Pull_up
  150 00000080 F04F 0402       ldr              r4, = BUMPERG
  151 00000084 F8CB 4000       str              r4, [r11]
  152 00000088         
  153 00000088 F8DF B088       ldr              r11, = GPIO_PORTE_BASE + (BUMPE
RG<<2) 
                                                            ;; @data Register =
                                                             @base + (mask<<2) 
                                                            ==> Switcher
  154 0000008C         
  155 0000008C         ;vvvvvvvvvvvvvvvvvvvvvvvFin configuration Bumper Gauche 
                       
  156 0000008C         
  157 0000008C         ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^CONFIGURATION Bumper LES 
                       DEUX 
  158 0000008C         
  159 0000008C F8DF 8078       ldr              r8, = GPIO_PORTE_BASE+GPIO_O_DE
N 
                                                            ;; Enable Digital F
                                                            unction 
  160 00000090 F04F 0403       ldr              r4, = BUMPER2



ARM Macro Assembler    Page 6 


  161 00000094 F8C8 4000       str              r4, [r8]
  162 00000098         
  163 00000098 F8DF 8070       ldr              r8, = GPIO_PORTE_BASE+GPIO_I_PU
R 
                                                            ;; Pull_up
  164 0000009C F04F 0403       ldr              r4, = BUMPER2
  165 000000A0 F8C8 4000       str              r4, [r8]
  166 000000A4         
  167 000000A4 F8DF 8070       ldr              r8, = GPIO_PORTE_BASE + (BUMPER
2<<2) 
                                                            ;; @data Register =
                                                             @base + (mask<<2) 
                                                            ==> Switcher
  168 000000A8         
  169 000000A8         ;vvvvvvvvvvvvvvvvvvvvvvvFin configuration Bumper LES DEU
                       X  
  170 000000A8         
  171 000000A8         
  172 000000A8         
  173 000000A8         
  174 000000A8         
  175 000000A8         
  176 000000A8         
  177 000000A8         
  178 000000A8         
  179 000000A8         ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^CLIGNOTTEMENT
  180 000000A8         
  181 000000A8 F8C9 3000       str              r3, [r9]    ;; Allume LED1&2 po
                                                            rtF broche 4&5 : 00
                                                            110000 (contenu de 
                                                            r3)
  182 000000AC         
  183 000000AC         ;-------------------------------------------------------
                       --------------------------------------------------------
                       -----
  184 000000AC         ;; BL Branchement vers un lien (sous programme)
  185 000000AC         
  186 000000AC         ; Configure les PWM + GPIO
  187 000000AC F7FF FFFE       BL               MOTEUR_INIT
  188 000000B0         
  189 000000B0         ; Activer les deux moteurs droit et gauche
  190 000000B0 F7FF FFFE       BL               MOTEUR_DROIT_ON
  191 000000B4 F7FF FFFE       BL               MOTEUR_GAUCHE_ON
  192 000000B8         
  193 000000B8         
  194 000000B8         
  195 000000B8         ; Boucle de pilotage des 2 Moteurs (Evalbot tourne sur l
                       ui même)
  196 000000B8         loop
  197 000000B8         ; Evalbot avance droit devant
  198 000000B8 F7FF FFFE       BL               MOTEUR_DROIT_AVANT
  199 000000BC F7FF FFFE       BL               MOTEUR_GAUCHE_AVANT
  200 000000C0         
  201 000000C0         ; Avancement pendant une période (deux WAIT)
  202 000000C0 F000 F80D       BL               WAIT        ; BL (Branchement v
                                                            ers le lien WAIT); 
                                                            possibilité de reto
                                                            ur à la suite avec 
                                                            (BX LR)



ARM Macro Assembler    Page 7 


<<<<<<< Updated upstream
  172 00000088 F000 F809       BL               WAIT        ; BL (Branchement v
                                                            ers le lien WAIT); 
                                                            possibilité de reto
                                                            ur à la suite avec 
                                                            (BX LR)
  173 0000008C F000 F807       BL               WAIT
  174 00000090         
  175 00000090         ; Rotation à droite de l'Evalbot pendant une demi-périod
                       e (1 seul WAIT)
  176 00000090         ;BL MOTEUR_DROIT_ARRIERE   ; MOTEUR_DROIT_INVERSE
  177 00000090 F000 F805       BL               WAIT
  178 00000094 F8D8 A000       ldr              r10,[r8]
  179 00000098         
  180 00000098 F1BA 0F00       CMP              r10,#0x00
  181 0000009C D1F0            BNE              loop
  182 0000009E         
  183 0000009E         
  184 0000009E         
  185 0000009E         
  186 0000009E         
  187 0000009E         
  188 0000009E         ;; Boucle d'attante  
  189 0000009E 4911    WAIT    ldr              r1, =0xAFFFFF
  190 000000A0         
  191 000000A0         
  192 000000A0 3901    wait1   subs             r1, #1
  193 000000A2 F8D8 A000       ldr              r10,[r8]
  194 000000A6 F1BA 0F00       CMP              r10,#0x00
  195 000000AA D1F9            BNE              wait1
  196 000000AC F7FF FFFE       BL               MOTEUR_GAUCHE_OFF
  197 000000B0 F7FF FFFE       BL               MOTEUR_DROIT_OFF
  198 000000B4         
  199 000000B4         
  200 000000B4         ;; retour à la suite du lien de branchement
  201 000000B4 4770            BX               LR
  202 000000B6         
  203 000000B6 BF00            NOP
  204 000000B8                 END
=======
  203 000000C4 F000 F80B       BL               WAIT
  204 000000C8         
  205 000000C8         ; Rotation à droite de l'Evalbot pendant une demi-périod
                       e (1 seul WAIT)
  206 000000C8         ;BL MOTEUR_DROIT_ARRIERE   ; MOTEUR_DROIT_INVERSE
  207 000000C8 F000 F809       BL               WAIT
  208 000000CC F8D8 A000       ldr              r10,[r8]
  209 000000D0         
  210 000000D0 F1BA 0F00       CMP              r10,#0x00
  211 000000D4 D1F0            BNE              loop
  212 000000D6         
  213 000000D6         
  214 000000D6         gameover
  215 000000D6 F7FF FFFE       BL               MOTEUR_GAUCHE_OFF
  216 000000DA F7FF FFFE       BL               MOTEUR_DROIT_OFF
  217 000000DE         ;; Boucle d'attante
  218 000000DE         
  219 000000DE 490F    WAIT    ldr              r1, =0xAFFFFF
  220 000000E0         
  221 000000E0         
  222 000000E0 3901    wait1   subs             r1, #1
  223 000000E2 D1FD            bne              wait1
  224 000000E4         
  225 000000E4         ;; retour à la suite du lien de branchement
  226 000000E4 4770            BX               LR
  227 000000E6         
  228 000000E6 BF00            NOP
  229 000000E8                 END
>>>>>>> Stashed changes
              400FE108 
              40025400 
              4002551C 
              40025500 
              400250C0 
              4000751C 
              40007510 
              40007300 
              4002451C 
              40024510 
              40024004 
              40024008 
              4002400C 
              00AFFFFF 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --depend=.\ob
jects\rk_priseenmain_moteurs.d -o.\objects\rk_priseenmain_moteurs.o -I.\RTE\_Ta
rget_1 -IC:\Users\Mathieu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\In
clude -IC:\Users\Mathieu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\Device\ARM\ARM
CM3\Include --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" --prede
fine="__UVISION_VERSION SETA 537" --predefine="_RTE_ SETA 1" --predefine="ARMCM
3 SETA 1" --predefine="_RTE_ SETA 1" --list=.\listings\rk_priseenmain_moteurs.l
st RK_PriseEnMain_Moteurs.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 6 in file RK_PriseEnMain_Moteurs.s
   Uses
      None
Comment: .text unused
<<<<<<< Updated upstream
WAIT 0000009E
=======
WAIT 000000DE
>>>>>>> Stashed changes

Symbol: WAIT
   Definitions
      At line 219 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 202 in file RK_PriseEnMain_Moteurs.s
      At line 203 in file RK_PriseEnMain_Moteurs.s
      At line 207 in file RK_PriseEnMain_Moteurs.s

__main 00000000

Symbol: __main
   Definitions
      At line 71 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 8 in file RK_PriseEnMain_Moteurs.s
Comment: __main used once
<<<<<<< Updated upstream
loop 00000080
=======
gameover 000000D6

Symbol: gameover
   Definitions
      At line 214 in file RK_PriseEnMain_Moteurs.s
   Uses
      None
Comment: gameover unused
loop 000000B8
>>>>>>> Stashed changes

Symbol: loop
   Definitions
      At line 196 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 211 in file RK_PriseEnMain_Moteurs.s
Comment: loop used once
<<<<<<< Updated upstream
wait1 000000A0
=======
wait1 000000E0
>>>>>>> Stashed changes

Symbol: wait1
   Definitions
      At line 222 in file RK_PriseEnMain_Moteurs.s
   Uses
<<<<<<< Updated upstream
      At line 195 in file RK_PriseEnMain_Moteurs.s
=======
      At line 223 in file RK_PriseEnMain_Moteurs.s
>>>>>>> Stashed changes
Comment: wait1 used once
5 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

BROCHE4_5 00000030

Symbol: BROCHE4_5
   Definitions
      At line 55 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 90 in file RK_PriseEnMain_Moteurs.s
      At line 94 in file RK_PriseEnMain_Moteurs.s
      At line 98 in file RK_PriseEnMain_Moteurs.s
      At line 104 in file RK_PriseEnMain_Moteurs.s
      At line 106 in file RK_PriseEnMain_Moteurs.s

BROCHE6 00000040

Symbol: BROCHE6
   Definitions
      At line 57 in file RK_PriseEnMain_Moteurs.s
   Uses
      None
Comment: BROCHE6 unused
BROCHE6_7 000000C0

Symbol: BROCHE6_7
   Definitions
      At line 59 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 115 in file RK_PriseEnMain_Moteurs.s
      At line 119 in file RK_PriseEnMain_Moteurs.s
      At line 122 in file RK_PriseEnMain_Moteurs.s

BUMPER2 00000003

Symbol: BUMPER2
   Definitions
      At line 63 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 160 in file RK_PriseEnMain_Moteurs.s
      At line 164 in file RK_PriseEnMain_Moteurs.s
      At line 167 in file RK_PriseEnMain_Moteurs.s

BUMPERD 00000001

Symbol: BUMPERD
   Definitions
      At line 61 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 132 in file RK_PriseEnMain_Moteurs.s
      At line 136 in file RK_PriseEnMain_Moteurs.s
      At line 139 in file RK_PriseEnMain_Moteurs.s

BUMPERG 00000002

Symbol: BUMPERG
   Definitions
      At line 62 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 146 in file RK_PriseEnMain_Moteurs.s
      At line 150 in file RK_PriseEnMain_Moteurs.s
      At line 153 in file RK_PriseEnMain_Moteurs.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols


DUREE 002FFFFF

Symbol: DUREE
   Definitions
      At line 66 in file RK_PriseEnMain_Moteurs.s
   Uses
      None
Comment: DUREE unused
GPIO_I_PUR 00000510

Symbol: GPIO_I_PUR
   Definitions
      At line 52 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 118 in file RK_PriseEnMain_Moteurs.s
      At line 135 in file RK_PriseEnMain_Moteurs.s
      At line 149 in file RK_PriseEnMain_Moteurs.s
      At line 163 in file RK_PriseEnMain_Moteurs.s

GPIO_O_DEN 0000051C

Symbol: GPIO_O_DEN
   Definitions
      At line 49 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 93 in file RK_PriseEnMain_Moteurs.s
      At line 114 in file RK_PriseEnMain_Moteurs.s
      At line 131 in file RK_PriseEnMain_Moteurs.s
      At line 145 in file RK_PriseEnMain_Moteurs.s
      At line 159 in file RK_PriseEnMain_Moteurs.s

GPIO_O_DIR 00000400

Symbol: GPIO_O_DIR
   Definitions
      At line 41 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 89 in file RK_PriseEnMain_Moteurs.s
Comment: GPIO_O_DIR used once
GPIO_O_DR2R 00000500

Symbol: GPIO_O_DR2R
   Definitions
      At line 45 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 97 in file RK_PriseEnMain_Moteurs.s
Comment: GPIO_O_DR2R used once
GPIO_PORTD_BASE 40007000

Symbol: GPIO_PORTD_BASE
   Definitions
      At line 32 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 114 in file RK_PriseEnMain_Moteurs.s
      At line 118 in file RK_PriseEnMain_Moteurs.s
      At line 122 in file RK_PriseEnMain_Moteurs.s

GPIO_PORTE_BASE 40024000



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols


Symbol: GPIO_PORTE_BASE
   Definitions
      At line 35 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 131 in file RK_PriseEnMain_Moteurs.s
      At line 135 in file RK_PriseEnMain_Moteurs.s
      At line 139 in file RK_PriseEnMain_Moteurs.s
      At line 145 in file RK_PriseEnMain_Moteurs.s
      At line 149 in file RK_PriseEnMain_Moteurs.s
      At line 153 in file RK_PriseEnMain_Moteurs.s
      At line 159 in file RK_PriseEnMain_Moteurs.s
      At line 163 in file RK_PriseEnMain_Moteurs.s
      At line 167 in file RK_PriseEnMain_Moteurs.s

GPIO_PORTF_BASE 40025000

Symbol: GPIO_PORTF_BASE
   Definitions
      At line 29 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 89 in file RK_PriseEnMain_Moteurs.s
      At line 93 in file RK_PriseEnMain_Moteurs.s
      At line 97 in file RK_PriseEnMain_Moteurs.s
      At line 106 in file RK_PriseEnMain_Moteurs.s

SYSCTL_PERIPH_GPIO 400FE108

Symbol: SYSCTL_PERIPH_GPIO
   Definitions
      At line 26 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 75 in file RK_PriseEnMain_Moteurs.s
Comment: SYSCTL_PERIPH_GPIO used once
15 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

MOTEUR_DROIT_ARRIERE 00000000

Symbol: MOTEUR_DROIT_ARRIERE
   Definitions
      At line 16 in file RK_PriseEnMain_Moteurs.s
   Uses
      None
Comment: MOTEUR_DROIT_ARRIERE unused
MOTEUR_DROIT_AVANT 00000000

Symbol: MOTEUR_DROIT_AVANT
   Definitions
      At line 15 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 198 in file RK_PriseEnMain_Moteurs.s
Comment: MOTEUR_DROIT_AVANT used once
MOTEUR_DROIT_INVERSE 00000000

Symbol: MOTEUR_DROIT_INVERSE
   Definitions
      At line 17 in file RK_PriseEnMain_Moteurs.s
   Uses
      None
Comment: MOTEUR_DROIT_INVERSE unused
MOTEUR_DROIT_OFF 00000000

Symbol: MOTEUR_DROIT_OFF
   Definitions
      At line 14 in file RK_PriseEnMain_Moteurs.s
   Uses
<<<<<<< Updated upstream
      At line 197 in file RK_PriseEnMain_Moteurs.s
=======
      At line 216 in file RK_PriseEnMain_Moteurs.s
>>>>>>> Stashed changes
Comment: MOTEUR_DROIT_OFF used once
MOTEUR_DROIT_ON 00000000

Symbol: MOTEUR_DROIT_ON
   Definitions
      At line 13 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 190 in file RK_PriseEnMain_Moteurs.s
Comment: MOTEUR_DROIT_ON used once
MOTEUR_GAUCHE_ARRIERE 00000000

Symbol: MOTEUR_GAUCHE_ARRIERE
   Definitions
      At line 22 in file RK_PriseEnMain_Moteurs.s
   Uses
      None
Comment: MOTEUR_GAUCHE_ARRIERE unused
MOTEUR_GAUCHE_AVANT 00000000

Symbol: MOTEUR_GAUCHE_AVANT
   Definitions
      At line 21 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 199 in file RK_PriseEnMain_Moteurs.s
Comment: MOTEUR_GAUCHE_AVANT used once
MOTEUR_GAUCHE_INVERSE 00000000

Symbol: MOTEUR_GAUCHE_INVERSE



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

   Definitions
      At line 23 in file RK_PriseEnMain_Moteurs.s
   Uses
      None
Comment: MOTEUR_GAUCHE_INVERSE unused
MOTEUR_GAUCHE_OFF 00000000

Symbol: MOTEUR_GAUCHE_OFF
   Definitions
      At line 20 in file RK_PriseEnMain_Moteurs.s
   Uses
<<<<<<< Updated upstream
      At line 196 in file RK_PriseEnMain_Moteurs.s
=======
      At line 215 in file RK_PriseEnMain_Moteurs.s
>>>>>>> Stashed changes
Comment: MOTEUR_GAUCHE_OFF used once
MOTEUR_GAUCHE_ON 00000000

Symbol: MOTEUR_GAUCHE_ON
   Definitions
      At line 19 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 191 in file RK_PriseEnMain_Moteurs.s
Comment: MOTEUR_GAUCHE_ON used once
MOTEUR_INIT 00000000

Symbol: MOTEUR_INIT
   Definitions
      At line 11 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 187 in file RK_PriseEnMain_Moteurs.s
Comment: MOTEUR_INIT used once
11 symbols
368 symbols in table
